import { TWO_POW_127 } from '../constants';

const MASKS_AND_FACTORS = [
  [0x8000000000000000n, 481231938336009023090067544955250113854n],
  [0x4000000000000000n, 404666211852346594250993303657235475948n],
  [0x2000000000000000n, 371080552416919877990254144423618836767n],
  [0x1000000000000000n, 355347954397881497469693820312941593443n],
  [0x800000000000000n, 347733580493780928808815525413232318461n],
  [0x400000000000000n, 343987798952690256687074238090730651112n],
  [0x200000000000000n, 342130066523749645191881555545647086143n],
  [0x100000000000000n, 341204966012395051463589306197117539651n],
  [0x80000000000000n, 340743354212339922144397487283364652955n],
  [0x40000000000000n, 340512782555889898808859563671008026639n],
  [0x20000000000000n, 340397555242326998647385072673097901535n],
  [0x10000000000000n, 340339956208435708755752659506489956133n],
  [0x8000000000000n, 340311160346490911934870813363085081661n],
  [0x4000000000000n, 340296763329178528376528243588334151603n],
  [0x2000000000000n, 340289565048926066557319684044576333862n],
  [0x1000000000000n, 340285965965899358974465315064323671036n],
  [0x800000000000n, 340284166438660709872813645066166128555n],
  [0x400000000000n, 340283266678610039476911010529773336521n],
  [0x200000000000n, 340282816799476865065514053322893021549n],
  [0x100000000000n, 340282591860133317712432962519222523747n],
  [0x80000000000n, 340282479390517303956044167089727739432n],
  [0x40000000000n, 340282423155723237052512385577070742059n],
  [0x20000000000n, 340282395038329688593740233918090740389n],
  [0x10000000000n, 340282380979633785612518603506803612670n],
  [0x8000000000n, 340282373950286051933938400987007267567n],
  [0x4000000000n, 340282370435612239547654640565033792378n],
  [0x2000000000n, 340282368678275346967764181521839267590n],
  [0x1000000000n, 340282367799606904081131786786979136761n],
  [0x800000000n, 340282367360272683488643795553082001443n],
  [0x400000000n, 340282367140605573405106851149122747984n],
  [0x200000000n, 340282367030772018416515141710341210063n],
  [0x100000000n, 340282366975855240935513477676743808340n],
  [0x80000000n, 340282366948396852198336193330767679917n],
  [0x40000000n, 340282366934667657830578438075407037644n],
  [0x20000000n, 340282366927803060646907282177123794346n],
  [0x10000000n, 340282366924370762055123634660330219950n],
  [0x8000000n, 340282366922654612759244793510020291790n],
  [0x4000000n, 340282366921796538111308618586887023373n],
  [0x2000000n, 340282366921367500787341342538325810693n],
  [0x1000000n, 340282366921152982125357907367296559436n],
  [0x800000n, 340282366921045722794366240495094772541n],
  [0x400000n, 340282366920992093128870419737322088773n],
  [0x200000n, 340282366920965278296122512528017799308n],
  [0x100000n, 340282366920951870879748559715761167680n],
  [0x80000n, 340282366920945167171561583507731730142n],
  [0x40000n, 340282366920941815317468095453241730942n],
  [0x20000n, 340282366920940139390421351438377911234n],
  [0x10000n, 340282366920939301426897979434041296353n],
  [0x8000n, 340282366920938882445136293432646812656n],
  [0x4000n, 340282366920938672954255450432143026744n],
  [0x2000n, 340282366920938568208815028931939497772n],
  [0x1000n, 340282366920938515836094818181849824282n],
  [0x800n, 340282366920938489649734712806808010286n],
  [0x400n, 340282366920938476556554660119287858975n],
  [0x200n, 340282366920938470009964633775527972241n],
  [0x100n, 340282366920938466736669620603648076105n],
  [0x80n, 340282366920938465100022114017708139844n],
  [0x40n, 340282366920938464281698360724738174666n],
  [0x20n, 340282366920938463872536484078253192815n],
  [0x10n, 340282366920938463667955545755010702074n],
  [0x8n, 340282366920938463565665076593389456749n],
  [0x4n, 340282366920938463514519842012578834098n],
  [0x2n, 340282366920938463488947224722173522776n],
  [0x1n, 340282366920938463476160916076970867115n],
];

export function exp2(x: bigint): bigint {
  // x must be less than 0x400000000000000000 == 64 << 64 (overflow check)
  if (x >= 0x400000000000000000n) {
    throw new Error('Overflow');
  }

  // Start with 0x80000000000000000000000000000000 (i.e. 2^127)
  let result = TWO_POW_127;

  for (const [mask, factor] of MASKS_AND_FACTORS) {
    if ((x & mask) !== 0n) {
      result = (result * factor) >> 128n;
    }
  }

  // Final adjustment: shift right by 63 - (x >> 64). (x >> 64) is the integer part.
  return result >> (63n - (x >> 64n));
}
